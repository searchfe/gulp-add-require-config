"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var path_1 = require("path");
var hash_1 = require("./hash");
function updateAll() {
    if (process.env.build_cache === "open") {
        var start = new Date().getTime();
        var cacheRoot_1 = path_1.resolve(__dirname, '.cache');
        if (fs_1.existsSync(cacheRoot_1)) {
            fs_1.readdirSync(cacheRoot_1).forEach(function (dir) {
                update(cacheRoot_1 + '/' + dir);
            });
        }
        console.log('finish update deps:', new Date().getTime() - start, 'ms');
    }
}
exports.updateAll = updateAll;
function update(cacheDir) {
    var fileList = fs_1.readdirSync(cacheDir);
    var delList = [];
    fileList.forEach(function (fileName) {
        if (path_1.extname(fileName) === ".info") {
            var path = cacheDir + '/' + fileName;
            if (!checkInfo(path)) {
                delList.push(path);
                console.log("Time Diff : ", fs_1.readFileSync(path).toString().split('\n')[0]);
            }
            else {
                var depPath = path.substring(0, path.length - ".info".length) + ".deps";
                if (!checkDep(depPath, cacheDir)) {
                    delList.push(path);
                    console.log("Deps Diff : ", fs_1.readFileSync(path).toString().toString().split('\n')[0]);
                }
            }
        }
    });
    delList.forEach(function (item) {
        del(item);
    });
}
exports.update = update;
function checkInfo(filePath) {
    var info = fs_1.readFileSync(filePath).toString().split('\n');
    if (fs_1.statSync(info[0]).mtimeMs !== parseFloat(info[1])) {
        // info 里的时间戳和 缓存里不一致
        return false;
    }
    return true;
}
function checkDep(depPath, cacheDir) {
    if (fs_1.existsSync(depPath)) {
        var deps = fs_1.readFileSync(depPath).toString().split('\n');
        var same_1 = true;
        deps.forEach(function (line) {
            if (!same_1) {
                // 已经diff就继续
                return;
            }
            var dep = line.split('\t');
            if (line.length === 0) {
                return;
            }
            if (!fs_1.existsSync(dep[0])) {
                // 物理不存在
                same_1 = false;
            }
            else if (fs_1.statSync(dep[0]).mtimeMs !== parseFloat(dep[1])) {
                // 物理依赖已经不一致
                same_1 = false;
            }
            else {
                // 物理一致要接受嵌入的校验
                var depTarget = hash_1.getNameByInfo(dep[0], parseFloat(dep[1]));
                // if (!existsSync(cacheDir + '/' + depTarget + '.info')) {
                //   // info 都没了说明已经干掉了 不用分析了
                //   console.log('-->', false, cacheDir + '/' + depTarget + '.info', dep[0], dep[1]);
                //   same = false;
                // } else
                if (!checkDep(cacheDir + '/' + depTarget + '.deps', cacheDir)) {
                    // console.log('===>', false);
                    same_1 = false;
                }
            }
        });
        return same_1;
    }
    else {
        return true;
    }
}
function del(fileInfoPath) {
    var prefix = fileInfoPath.substring(0, fileInfoPath.length - ".info".length);
    fs_1.unlinkSync(fileInfoPath);
    delSync(prefix + '.deps');
    delSync(prefix + '.link');
    delSync(prefix + '.pass');
    delSync(prefix + '.cache');
}
function delSync(filePath) {
    if (fs_1.existsSync(filePath)) {
        fs_1.unlinkSync(filePath);
    }
}
